"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MediaWikiJSError = exports.ErrorMessages = void 0;
exports.ErrorMessages = {
    FAILED_LOGIN: (error) => `Login was unsuccessful: ${error}`,
    LOADING_CONFIG: (error) => `Failed to load config: ${error}`,
    MEDIAWIKI_ERROR: (error) => `Error returned by API: ${error}`,
    NO_CONFIG: 'No configuration was provided.',
    NO_CREDENTIALS: 'Insufficient credentials were provided. Expected username and password.'
};
class MediaWikiJSError extends Error {
    code;
    constructor(key, ...args) {
        if (exports.ErrorMessages[key] === null)
            throw new TypeError(`Error - key '${key}' does not exist`);
        const message = args?.length
            // eslint-disable-next-line @typescript-eslint/ban-ts-comment
            // @ts-ignore
            ? exports.ErrorMessages[key](...args)
            : exports.ErrorMessages[key];
        super(message);
        this.code = key;
        Object.setPrototypeOf(this, MediaWikiJSError.prototype);
    }
    get name() {
        return `MediaWikiJSError [${this.code}]`;
    }
}
exports.MediaWikiJSError = MediaWikiJSError;
