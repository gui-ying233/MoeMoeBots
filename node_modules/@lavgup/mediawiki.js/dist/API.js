"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.API = void 0;
const tslib_1 = require("tslib");
const got_1 = tslib_1.__importDefault(require("got"));
const tough_cookie_1 = require("tough-cookie");
const MediaWikiJSError_1 = require("./MediaWikiJSError");
class API {
    mwToken;
    options;
    loginRetries = 0;
    bot;
    jar;
    url;
    constructor(bot, options) {
        this.options = options;
        this.url = options.url;
        this.bot = bot;
        this.jar = new tough_cookie_1.CookieJar();
        this.mwToken = '+\\';
    }
    async mw(params, csrf, method) {
        const payload = {
            responseType: 'json',
            cookieJar: this.jar
        };
        const payloadType = (method === 'POST' ? 'form' : 'searchParams');
        payload[payloadType] = {
            ...params,
            format: 'json',
            formatversion: 2
        };
        // Add csrf
        if (csrf)
            payload[payloadType].token = this.mwToken;
        const { body } = await (method === 'POST' ? got_1.default.post : got_1.default.get)(this.url, payload);
        if (!body) {
            throw new MediaWikiJSError_1.MediaWikiJSError('MEDIAWIKI_ERROR', 'Request did not return a body');
        }
        // Handle session loss
        if (body.login?.result === 'Aborted') {
            if (body.login.reason === 'Cannot log in when using MediaWiki\\Session\\BotPasswordSessionProvider sessions.')
                return {
                    login: {
                        result: 'Success',
                        preventOverwrite: true
                    }
                };
            if (this.loginRetries >= 1) {
                throw new MediaWikiJSError_1.MediaWikiJSError('FAILED_LOGIN', body.login.reason);
            }
            this.loginRetries++;
            await this.bot.login(this.options.botUsername, this.options.botPassword);
            return this.mw(params, csrf, method);
        }
        if (body.error) {
            // CSRF Catch
            if (body.error?.code === 'badtoken') {
                let tokenPack = await this.get({
                    action: 'query',
                    meta: 'tokens',
                    type: 'csrf'
                });
                if (tokenPack?.query?.tokens?.csrftoken) {
                    this.mwToken = tokenPack.query.tokens.csrftoken;
                }
                else {
                    // MW 1.19 support
                    tokenPack = await this.get({
                        action: 'query',
                        prop: 'info',
                        intoken: 'edit',
                        titles: 'F'
                    });
                    // eslint-disable-next-line @typescript-eslint/ban-ts-comment
                    // @ts-ignore
                    this.mwToken = Object.values(tokenPack.query.pages)[0].edittoken;
                }
                return this.mw(params, csrf, method);
            }
            throw new MediaWikiJSError_1.MediaWikiJSError('MEDIAWIKI_ERROR', body.error.info);
        }
        return body;
    }
    get(params, csrf) {
        return this.mw(params, csrf, 'GET');
    }
    post(params, csrf) {
        return this.mw(params, csrf, 'POST');
    }
}
exports.API = API;
