import { API } from './API';
import { Config, ResObject } from './types';
/**
 * A MediaWikiJS object.
 * @param options - The configuration options.
 * @param options.url - The url to the wiki's api.php file.
 * @param [options.botUsername] - The bot's bot username, obtained from Special:BotPasswords.
 * @param [options.botPassword] - The bot's bot password, obtained from Special:BotPasswords.
 */
export declare class MediaWikiJS {
    api: API;
    API_LIMIT: number;
    options: Config;
    constructor(options: Config);
    /**
     * Logs in to a wiki bot.
     * @param [username] - username The bot username of the account to log in to.
     * @param [password] - The bot password of the account to log in to.
     */
    login(username?: string, password?: string): Promise<Record<string, unknown>>;
    /**
     * Logs out of a wiki bot.
     * Removes cookies and deletes tokens.
     */
    logout(): Promise<ResObject>;
    /**
     * Gets a CSRF token.
     */
    getCSRFToken(): Promise<string>;
    /**
     * Gets the first item in an object.
     * @param object - The object to get the first item of.
     */
    getFirstItem(object: {
        [key: string]: never;
    }): {
        [key: string]: never;
    };
    /**
     * Gets only the page titles of a list and formats it into an array.
     * @param array - The array to get a list from.
     * @param property - The property of the page title in each object.
     */
    getList(array: Record<string, unknown>[], property?: string): string[];
    /**
     * Gets pages in a category.
     * @param category - The category to get pages of.
     * @param onlyTitles - Whether to only list the page titles.
     */
    getPagesInCategory(category: string, onlyTitles?: boolean): Promise<string[] | Record<string, unknown>[]>;
    /**
     * Gets all categories an article is in.
     * @param title - The title of the page to get categories from.
     * @param onlyTitles - Whether to only list the page titles.
     */
    getArticleCategories(title: string, onlyTitles?: boolean): Promise<string[] | Record<string, unknown>[]>;
    /**
     * Searches the wiki.
     * @param keyword - The keyword for the search.
     * @param onlyTitles - Whether to only list the page titles.
     */
    search(keyword: string, onlyTitles?: boolean): Promise<string[] | Record<string, unknown>[]>;
    /**
     * Main wrapper for editing pages.
     * @param params - Mandatory params for the edit.
     */
    doEdit(params: {
        [key: string]: unknown;
    }): Promise<Record<string, unknown>>;
    /**
     * Edits the contents of a page.
     * @param options - The options for the edit.
     * @param options.title - The title of the page to edit.
     * @param options.content - The content of the edit.
     * @param options.summary - The summary of the edit.
     * @param options.minor - Whether to mark the edit as minor.
     */
    edit({ title, content, summary, minor }: {
        title: string;
        content: string;
        summary: string;
        minor?: boolean;
    }): Promise<ResObject>;
    /**
     * Appends content to a page.
     * @param options - The options for the edit.
     * @param options.title - The title of the page to edit.
     * @param options.content - The content of the edit.
     * @param options.summary - The summary of the edit.
     * @param options.minor - Whether to mark the edit as minor.
     */
    prepend({ title, content, summary, minor }: {
        title: string;
        content: string;
        summary: string;
        minor?: boolean;
    }): Promise<ResObject>;
    /**
     * Appends content to a page.
     * @param options - The options for the edit.
     * @param options.title - The title of the page to edit.
     * @param options.content - The content of the edit.
     * @param options.summary - The summary of the edit.
     * @param options.minor - Whether to mark the edit as minor.
     */
    append({ title, content, summary, minor }: {
        title: string;
        content: string;
        summary: string;
        minor?: boolean;
    }): Promise<ResObject>;
    /**
     * Undoes a revision.
     * @param options - The options for the undo.
     * @param options.title - The title of the page of which revision to undo.
     * @param options.revision - The revision to undo.
     * @param options.summary - The summary of the edit.
     */
    undo({ title, revision, summary }: {
        title: string;
        revision: string;
        summary: string;
    }): Promise<ResObject>;
    /**
     * Deletes a page.
     * @param options - The options for the deletion.
     * @param options.title - The title of the page to delete.
     * @param options.reason - The reason for deleting the page.
     */
    delete({ title, reason }: {
        title: string;
        reason?: string;
    }): Promise<ResObject>;
    /**
     * Restore revisions of a deleted page.
     * @param options - The options for the deletion.
     * @param options.title - The title of the page to restore.
     * @param options.reason - The reason for restoring this page.
     */
    restore({ title, reason }: {
        title: string;
        reason?: string;
    }): Promise<ResObject>;
    /**
     * Change the protection level of a page.
     * @param options - The options for the protection.
     * @param options.title - The title of the page to modify the protection level of.
     * @param options.protections - The protections to set the page to.
     * @param options.expiry - The expiry for the protection.
     * @param options.reason - The reason for modifying the page's protection level.
     * @param options.cascade - Whether to enable cascading protection.
     */
    protect({ title, protections, expiry, reason, cascade }: {
        title: string;
        protections: {
            edit: string | undefined;
            move: string | undefined;
        };
        expiry: string;
        reason: string;
        cascade?: boolean;
    }): Promise<ResObject>;
    /**
     * Blocks a user.
     * @param options - The options for the block.
     * @param options.user - The username of the user to block.
     * @param options.expiry - The expiry of the block.
     * @param options.reason - The reason for the block.
     * @param [options.allowUserTalk] - Whether to block the user from editing their own talk page.
     * @param [options.autoblock] - Whether to automatically block the last used IP address, and any subsequent IP addresses they try to login from.
     * @param [options.reblock] - Whether to overwrite the existing block, if the user is already blocked.
     */
    block({ user, expiry, reason, allowUserTalk, autoblock, reblock }: {
        user: string;
        expiry: string;
        reason: string;
        allowUserTalk?: boolean;
        autoblock?: boolean;
        reblock?: boolean;
    }): Promise<ResObject>;
    /**
     * Unblocks a user.
     * @param user - The username of the user to unblock.
     * @param reason - The reason for the unblock.
     */
    unblock(user: string, reason: string): Promise<ResObject>;
    /**
     * Purges the cache of a list of pages.
     * @param titles - The title(s) of the pages to delete.
     */
    purge(titles: string[] | string): Promise<ResObject>;
    /**
     * Sends an email to a user.
     * @param options - The options for the email.
     * @param options.user - The user to email.
     * @param options.subject - The subject of the email.
     * @param options.content - The content of the email.
     */
    email({ user, subject, content }: {
        user: string;
        subject: string;
        content: string;
    }): Promise<ResObject>;
    /**
     * Get all edits by a user.
     * @param options - The options for the request.
     * @param options.user - The users to retrieve contributions for.
     * @param options.start - The start timestamp to return from.
     * @param options.namespace - Only list contributions in these namespaces.
     * @param options.onlyTitles - Whether to only list the page titles.
     */
    getUserContribs({ user, start, namespace, onlyTitles }: {
        user: string;
        start: string;
        namespace?: string;
        onlyTitles?: boolean;
    }): Promise<string[] | Record<string, unknown>>;
    /**
     * Creates a new account.
     * @param username - The username for the new account.
     * @param password - The password for the new account.
     */
    createAccount(username: string, password: string): Promise<ResObject>;
    /**
     * Moves a page.
     * @param options - The options for the move.
     * @param options.from - The page title to rename.
     * @param options.to - The new page title.
     * @param options.reason - The reason for moving this page.
     */
    move({ from, to, reason }: {
        from: string;
        to: string;
        reason: string;
    }): Promise<ResObject>;
    /**
     * Gets all images on the wiki.
     * @param start - The image title to start enumerating from.
     * @param onlyTitles - Whether to only list the image titles.
     */
    getImages(start: string, onlyTitles?: boolean): Promise<string[] | ResObject[]>;
    /**
     * Gets all images from an article.
     * @param options - The options for the request.
     * @param options.page - The page to get all its images from.
     * @param options.onlyTitles - Whether to only list the image titles.
     * @param options.otherOptions - Any other options for the request.
     */
    getImagesFromArticle({ page, onlyTitles, otherOptions }: {
        page: string;
        onlyTitles?: boolean;
        otherOptions?: Record<string, unknown>;
    }): Promise<string[] | ResObject[]>;
    /**
     * Find all pages that use the given image title.
     * @param fileName - Title to search.
     * @param onlyTitles - Whether to only list the page titles.
     */
    getImageUsage(fileName: string, onlyTitles?: boolean): Promise<string[] | Record<string, unknown>[]>;
    /**
     * Gets information about the current user.
     */
    whoAmI(): Promise<ResObject>;
    /**
     * Gets information about a given user.
     * @param username - The username of the account to look up.
     */
    whoIs(username: string): Promise<ResObject>;
    /**
     * Gets information about multiple users.
     * @param usernames - The usernames of the accounts to look up.
     */
    whoAre(usernames: string[]): Promise<ResObject>;
    /**
     * Expands all templates within wikitext.
     * @param text
     * @param title
     */
    expandTemplates(text: string, title: string): Promise<string>;
    /**
     * Parses content and returns parser output.
     * @param text - Text to parse.
     * @param title - Title of page the text belongs to.
     */
    parse(text: string, title: string): Promise<string>;
    /**
     * Enumerate recent changes.
     * @param start - The timestamp to start enumerating from.
     * @param onlyTitles - Whether to only list the page titles.
     */
    getRecentChanges(start?: string, onlyTitles?: boolean): Promise<string[] | ResObject[]>;
    /**
     * Return general information about the site.
     * @param props - Which information to get.
     */
    getSiteInfo(props: string | string[]): Promise<ResObject>;
    /**
     * Returns site statistics.
     */
    getSiteStats(): Promise<ResObject>;
    /**
     * Gets the wiki's MediaWiki version.
     */
    getMwVersion(): Promise<string>;
    /**
     * Returns a list of all pages from a query page.
     * @param queryPage - The query page.
     * @param onlyTitles - Whether to only list the page titles.
     */
    getQueryPage(queryPage: string, onlyTitles?: boolean): Promise<string[] | ResObject[]>;
    /**
     * Returns all external URLs from the given page.
     * @param page - The page to get its external URLs from.
     */
    getExternalLinks(page: string): Promise<string[]>;
    /**
     * Find all pages that link to the given page.
     * @param page - Title to search.
     * @param onlyTitles - Whether to only list the page titles.
     */
    getBackLinks(page: string, onlyTitles?: boolean): Promise<string[] | ResObject[]>;
}
